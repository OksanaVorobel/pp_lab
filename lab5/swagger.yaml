openapi: 3.0.1

info:
  title: Your e-purse
  description: 'This is your personal e-purse. You can transfer or receive money from other users.'
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  

servers:
- url: https://your_e-purse.swagger.io/v1
- url: http://your_e-purse.swagger.io/v1

tags:
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
- name: purse
  description: Everything about your purse
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: transfer
  description: About transfer
    
paths:
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
       200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
       400:
          description: Invalid user supplied
          content: {}
  
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: phone
        in: query
        description: phone that need to be updated
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - api_key: []
  
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: phone
        in: query
        description: The user name for login
        required: true
        schema:
          type: integer
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid phone/password supplied
          content: {}
          
          
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
      security:
        - api_key: []
          
  
  /user/{phone}:  
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: phone
        in: path
        description: The phone that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        400:
          description: Invalid userphone supplied
          content: {}
        404:
          description: User not found
          content: {}     
      security:
        - api_key: []
  
  
  /{UserId}:
    post:
      tags:
      - purse
      summary: Create purse
      description: This can only be done by the logged in user.
      operationId: createPurse
      parameters:
        - name: UserId
          in: path
          description: Your User Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Created purse object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Purse'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Purse'
            application/json:
              schema:
                $ref: '#/components/schemas/Purse'
        405:
          description:   Invalid input
          content: {}
      security:
        - api_key: []
        
  /{UserId}, {PurseId}:
    get:
      tags:
      - purse
      summary: Check your purse by ID
      description: Returns data about your purse
      operationId: getPurseById
      parameters:
      - name: UserId
        in: path
        description: Your ID
        required: true
        schema:
          type: integer
          format: int64
      - name: PurseId
        in: path
        description: ID of Purse to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Purse'
            application/json:
              schema:
                $ref: '#/components/schemas/Purse'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Purse not found
          content: {}
      security:
        - api_key: []    
    
  /{PurseId}:  
    delete:
      tags:
      - purse
      summary: Deletes a purse
      operationId: deletePurse
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: PurseId
        in: path
        description: Purse id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Purse not found
          content: {}
      security:
        - api_key: [] 
   
  
  /{idPurseFrom}, {idUserFrom}, {idPurseTo}, {idUserTo}, :
    post:
      tags:
      - transfer
      summary: Make a transfer
      operationId: makeTransfer
      parameters:
      - name: idUserFrom
        in: path
        description: Your User ID
        required: true
        schema:
          type: integer
          format: int64
      - name: idPurseFrom
        in: path
        description: ID of your purse from which you want to transfer
        required: true
        schema:
          type: integer
          format: int64
      - name: idUserTo
        in: path
        description: ID of the user to whom you want to transfer funds
        required: true
        schema:
          type: integer
          format: int64
      - name: idPurseTo
        in: path
        description: ID of user's purse to which you want to transfer money
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: transfer to another user's purse
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Transfer'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Transfer'
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        400:
          description: Invalid Transfer
          content: {}
        404:
          description: Purse or User not found
          content: {}
      security:
        - api_key: []   
      
      
  /transfer/{TransferId}, /Purse/{PurseId}:
    get:
      tags:
      - transfer
      summary: Find the transfer by ID
      operationId: GetTransferById
      parameters:
      - name: PurseId
        in: path
        description: ID of your purse from which you made the transfer
        required: true
        schema:
          type: integer
          format: int64
      - name: TransferId
        in: path
        description: ID of the transfer you want to find
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Transfer'
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Transfer not found
      security:
        - api_key: []
          
          
          
components:
  schemas:
  
    User:
      type: object
      properties:
        UserId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: integer
          format: int32
      xml:
        name: User
        
    Purse:
      type: object
      properties:
        PurseId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        funds:
           type: integer
      xml:
        name: Purse
    
    Transfer:
      type: object
      properties:
        TransferId:
          type: integer
          format: int64
        idPurseFrom:
          type: integer
          format: int64
        idPurseTo:
          type: integer
          format: int64
        quanityFunds:
           type: integer
           format: int32
        date:
           type: string
           format: date-time
      xml:
        name: Transfer
        
  securitySchemes:
    e-purse_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://your_e-purse.swagger.io//oauth/dialog
          scopes:
            purse: make transfer in your account
            
    api_key:
      type: apiKey
      name: api_key
      in: header
      